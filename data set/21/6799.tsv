2007-01-23T15:31:00.000Z	brainly-green		what are the main reasons why starting a process has higher overhead than calling a function?
2007-01-23T15:33:00.000Z	brainly-green		superficially they seem pretty similar, with the difference that a process can only directly take string arguments and produce string output
2007-01-23T15:34:00.000Z	xtknight	brainly-green	a process involves creating another thread and the kernel has to schedule that thread
2007-01-23T15:34:00.000Z	xtknight	brainly-green	additionally it has to allocate memory for the process etc.  arguments are stored on the stack when passed to an internal function, but they are stored in a string array when passed to a process which is inherently slower
2007-01-23T15:39:00.000Z	xtknight	brainly-green	the stack is stored in cpu cache to my knowledge, which is faster than memory.  yes in order to store 50000 as an integer it would be 5 0 0 0 0 (5 bytes) and that would be that.  but to store it as a string it would be "53 48 48 48 48" and that would have to be converted to an integer
2007-01-23T15:39:00.000Z	xtknight	brainly-green	if you want to call an external function, look into dynamic link libraries
2007-01-23T15:40:00.000Z	brainly-green	xtknight	well if 50000 were an unsigned 16-bit integer, it could be passed in 2 characters
2007-01-23T15:40:00.000Z	xtknight	brainly-green	2 ?  how is that?
2007-01-23T15:40:00.000Z	xtknight	brainly-green	(assuming you mean one character is one byte)
2007-01-23T15:42:00.000Z	xtknight	brainly-green	always five bytes for 50000 though regardless of the form, right?
2007-01-23T15:43:00.000Z	xtknight	brainly-green	could you explain how the integer 50,000 would like in 2 bytes?
2007-01-23T15:43:00.000Z	xtknight	brainly-green	would look like *
2007-01-23T15:44:00.000Z	xtknight	brainly-green	2^2 would be a 2-bit integer, 0-7 unsigned
2007-01-23T15:45:00.000Z	xtknight	brainly-green	oh, sorry you said 2 byte.  never mind ;)
2007-01-23T15:45:00.000Z	xtknight	brainly-green	in other words 16-bit.  yes, 0-65535
2007-01-23T15:46:00.000Z	xtknight	brainly-green	sorry, im just having a brain freeze right now.  50000 could definitely fit into 2 bytes with an integer, but it would need 5 for ascii or 10 for unicode string
2007-01-23T15:47:00.000Z	xtknight	brainly-green	but that's not the main reason it's slower.  when you start a process the kernel has to do all sorts of stuff that causes the registers to be flushed/etc
2007-01-23T15:50:00.000Z	xtknight	brainly-green	what would be the point, though ?
2007-01-23T15:50:00.000Z	xtknight	brainly-green	you could just statically link your programs with the libraries you need, and you're converting threads into functions that way, i guess
2007-01-23T15:52:00.000Z	xtknight	brainly-green	well, that's really the point of COM i guess.  though DLLs still have threads for flexibility.
2007-01-23T15:53:00.000Z	xtknight	brainly-green	i do see the point in what you're talking about, though once the DLL is loaded and in memory i think the overhead is greatly reduced from the first call
