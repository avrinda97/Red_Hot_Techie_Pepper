2010-08-13T17:37:00.000Z	zamba		i'm trying to redirect output from a program into file.. problem is that output is written in 4096 bytes large blocks
2010-08-13T17:38:00.000Z	zamba		instead of continously
2010-08-13T17:38:00.000Z	zamba		is there a way i can alter this behaviour?
2010-08-13T17:38:00.000Z	_DGM_	zamba	that might be the cluster size of your partition. Theres a difference between size on disk and actual size
2010-08-13T17:39:00.000Z	zamba	_DGM_	so what can i do to get continuous output?
2010-08-13T17:39:00.000Z	_DGM_	zamba	the actual file size should be what you expect it to be
2010-08-13T17:40:00.000Z	_DGM_	zamba	you don't. Thats how partitions work. If you have a 4kb cluster size on a partition, the file would always take up atleast 4kb even if you write 1 byte into it. Its normal.
2010-08-13T17:40:00.000Z	_DGM_	zamba	even further, you could have a 10gb file that only takes up 2 bytes of actual space on the disk.. therefor having "more" on the disk then thats actually possible :)
2010-08-13T17:41:00.000Z	zamba	_DGM_	no, you misunderstand
2010-08-13T17:41:00.000Z	zamba	_DGM_	i'm not looking at the file size now.. i'm doing 'tail -f' and noticing that nothing happens for long periods of time
2010-08-13T17:42:00.000Z	_DGM_	zamba	but if you're piping from a command, it will write when either the buffer is full or when the program has finished running. Thats just the buffer size then.
2010-08-13T17:43:00.000Z	_DGM_	zamba	you will have to recompile your kernel and change PIPE_SIZE to something smaller then 4096
2010-08-13T17:43:00.000Z	zamba	_DGM_	and then suddenly a whole chunk of data.. when in fact, if i don't redirect stdout, then it's a continous stream of output
2010-08-13T17:44:00.000Z	_DGM_	zamba	because stdio buffer clears on \n, instead of when the buffer is full
2010-08-13T17:44:00.000Z	zamba	_DGM_	ah, so there's no way i can force this?
2010-08-13T17:45:00.000Z	zamba	_DGM_	maybe pipe it through something first?
2010-08-13T17:45:00.000Z	_DGM_	zamba	only by changing it in the kernel and recompiling as far as i know
2010-08-13T17:45:00.000Z	zamba	_DGM_	ok
2010-08-13T17:45:00.000Z	_DGM_	zamba	in the kernel code search for PIPE_SIZE or something similar
2010-08-13T17:46:00.000Z	zamba	_DGM_	recompiling the kernel is out of the question for this :)
2010-08-13T17:46:00.000Z	_DGM_	zamba	the only other way would be seeing if the program has some kind of logging feature on itself, instead of piping
2010-08-13T17:47:00.000Z	zamba	_DGM_	yeah, i'm investigating that now
2010-08-13T17:48:00.000Z	_DGM_	zamba	i *think* you might also be able to write a simple C program that executes through fork. If you then change the stdio to a file descriptor before you do that, i think it will not use the pipesize. but thats just a guess
